"use client";

import { useState } from "react";
import type { NextPage } from "next";
import { formatEther, parseEther } from "viem";
import { useAccount } from "wagmi";
import { Address } from "~~/components/scaffold-eth";
import { useScaffoldReadContract, useScaffoldWriteContract } from "~~/hooks/scaffold-eth";
import { notification } from "~~/utils/scaffold-eth";

const Home: NextPage = () => {
  const { address: connectedAddress } = useAccount();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫—Ä–æ—É
  const [sellerAddress, setSellerAddress] = useState("");
  const [arbiterAddress, setArbiterAddress] = useState("");
  const [amount, setAmount] = useState("");
  const [arbiterFee, setArbiterFee] = useState("");
  const [description, setDescription] = useState("");

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [activeTab, setActiveTab] = useState<"create" | "my-escrows">("create");

  // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const { data: userEscrows } = useScaffoldReadContract({
    contractName: "YourContract",
    functionName: "getUserEscrows",
    args: [connectedAddress],
  });

  const { data: pendingWithdrawal } = useScaffoldReadContract({
    contractName: "YourContract",
    functionName: "getPendingWithdrawal",
    args: [connectedAddress],
  });

  const { data: platformStats } = useScaffoldReadContract({
    contractName: "YourContract",
    functionName: "getPlatformStats",
  });

  // –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  const { writeContractAsync: createEscrow } = useScaffoldWriteContract("YourContract");
  const { writeContractAsync: confirmDelivery } = useScaffoldWriteContract("YourContract");
  const { writeContractAsync: confirmReceipt } = useScaffoldWriteContract("YourContract");
  const { writeContractAsync: raiseDispute } = useScaffoldWriteContract("YourContract");
  const { writeContractAsync: cancelEscrow } = useScaffoldWriteContract("YourContract");
  const { writeContractAsync: withdraw } = useScaffoldWriteContract("YourContract");

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Å–∫—Ä–æ—É
  const handleCreateEscrow = async () => {
    try {
      if (!sellerAddress || !arbiterAddress || !amount || !description) {
        notification.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
        return;
      }

      await createEscrow({
        functionName: "createEscrow",
        args: [sellerAddress, arbiterAddress, parseEther(arbiterFee || "0"), description],
        value: parseEther(amount),
      });

      notification.success("–≠—Å–∫—Ä–æ—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");

      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setSellerAddress("");
      setArbiterAddress("");
      setAmount("");
      setArbiterFee("");
      setDescription("");
      setActiveTab("my-escrows");
    } catch (error) {
      console.error("Error creating escrow:", error);
      notification.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Å–∫—Ä–æ—É");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
  const handleConfirmDelivery = async (escrowId: number) => {
    try {
      await confirmDelivery({
        functionName: "confirmDelivery",
        args: [BigInt(escrowId)],
      });
      notification.success("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!");
    } catch (error) {
      console.error("Error confirming delivery:", error);
      notification.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è
  const handleConfirmReceipt = async (escrowId: number) => {
    try {
      await confirmReceipt({
        functionName: "confirmReceipt",
        args: [BigInt(escrowId)],
      });
      notification.success("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.");
    } catch (error) {
      console.error("Error confirming receipt:", error);
      notification.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–∞
  const handleRaiseDispute = async (escrowId: number) => {
    try {
      await raiseDispute({
        functionName: "raiseDispute",
        args: [BigInt(escrowId)],
      });
      notification.success("–°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç. –ê—Ä–±–∏—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.");
    } catch (error) {
      console.error("Error raising dispute:", error);
      notification.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ—Ä–∞");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —ç—Å–∫—Ä–æ—É
  const handleCancelEscrow = async (escrowId: number) => {
    try {
      await cancelEscrow({
        functionName: "cancelEscrow",
        args: [BigInt(escrowId)],
      });
      notification.success("–≠—Å–∫—Ä–æ—É –æ—Ç–º–µ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.");
    } catch (error) {
      console.error("Error cancelling escrow:", error);
      notification.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —ç—Å–∫—Ä–æ—É");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
  const handleWithdraw = async () => {
    try {
      await withdraw({
        functionName: "withdraw",
      });
      notification.success("–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!");
    } catch (error) {
      console.error("Error withdrawing:", error);
      notification.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getStatusText = (status: number) => {
    const statuses = ["–°–æ–∑–¥–∞–Ω", "–ü—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "–ó–∞–≤–µ—Ä—à–µ–Ω", "–û—Å–ø–∞—Ä–∏–≤–∞–µ—Ç—Å—è", "–í–æ–∑–≤—Ä–∞—â–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"];
    return statuses[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status: number) => {
    const colors = [
      "badge-info",
      "badge-warning",
      "badge-primary",
      "badge-success",
      "badge-error",
      "badge-ghost",
      "badge-ghost",
    ];
    return colors[status] || "badge-ghost";
  };

  return (
    <>
      <div className="flex items-center flex-col grow pt-10">
        <div className="px-5 w-full max-w-7xl">
          <h1 className="text-center mb-8">
            <span className="block text-4xl font-bold mb-2">üîê Escrow Platform</span>
            <span className="block text-xl text-base-content/70">–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ P2P —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>
          </h1>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ */}
          <div className="flex justify-center items-center space-x-2 mb-6">
            <div className="flex flex-col items-center">
              <p className="font-medium mb-2">–í–∞—à –∞–¥—Ä–µ—Å:</p>
              <Address address={connectedAddress} />
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã */}
          {platformStats && (
            <div className="stats shadow w-full mb-6">
              <div className="stat">
                <div className="stat-title">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
                <div className="stat-value text-primary">{platformStats[0]?.toString()}</div>
              </div>
              <div className="stat">
                <div className="stat-title">–û–±—â–∏–π –æ–±—ä–µ–º</div>
                <div className="stat-value text-secondary">
                  {parseFloat(formatEther(platformStats[1] || BigInt(0))).toFixed(4)} ETH
                </div>
              </div>
              <div className="stat">
                <div className="stat-title">–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É</div>
                <div className="stat-value text-accent">
                  {parseFloat(formatEther(pendingWithdrawal || BigInt(0))).toFixed(4)} ETH
                </div>
                {pendingWithdrawal && pendingWithdrawal > 0n && (
                  <div className="stat-actions">
                    <button className="btn btn-sm btn-success" onClick={handleWithdraw}>
                      –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
                    </button>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –¢–∞–±—ã */}
          <div className="tabs tabs-boxed mb-6 justify-center">
            <a
              className={`tab tab-lg ${activeTab === "create" ? "tab-active" : ""}`}
              onClick={() => setActiveTab("create")}
            >
              –°–æ–∑–¥–∞—Ç—å —ç—Å–∫—Ä–æ—É
            </a>
            <a
              className={`tab tab-lg ${activeTab === "my-escrows" ? "tab-active" : ""}`}
              onClick={() => setActiveTab("my-escrows")}
            >
              –ú–æ–∏ —Å–¥–µ–ª–∫–∏ ({userEscrows?.length || 0})
            </a>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
          <div className="w-full">
            {/* –°–æ–∑–¥–∞–Ω–∏–µ —ç—Å–∫—Ä–æ—É */}
            {activeTab === "create" && (
              <div className="card bg-base-100 shadow-xl">
                <div className="card-body">
                  <h2 className="card-title text-2xl mb-4">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É</h2>

                  <div className="form-control w-full">
                    <label className="label">
                      <span className="label-text">–ê–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞</span>
                    </label>
                    <input
                      type="text"
                      placeholder="0x..."
                      className="input input-bordered w-full"
                      value={sellerAddress}
                      onChange={e => setSellerAddress(e.target.value)}
                    />
                  </div>

                  <div className="form-control w-full">
                    <label className="label">
                      <span className="label-text">–ê–¥—Ä–µ—Å –∞—Ä–±–∏—Ç—Ä–∞</span>
                    </label>
                    <input
                      type="text"
                      placeholder="0x..."
                      className="input input-bordered w-full"
                      value={arbiterAddress}
                      onChange={e => setArbiterAddress(e.target.value)}
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="form-control w-full">
                      <label className="label">
                        <span className="label-text">–°—É–º–º–∞ (ETH)</span>
                      </label>
                      <input
                        type="text"
                        placeholder="0.1"
                        className="input input-bordered w-full"
                        value={amount}
                        onChange={e => setAmount(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full">
                      <label className="label">
                        <span className="label-text">–ö–æ–º–∏—Å—Å–∏—è –∞—Ä–±–∏—Ç—Ä–∞ (ETH)</span>
                      </label>
                      <input
                        type="text"
                        placeholder="0.01"
                        className="input input-bordered w-full"
                        value={arbiterFee}
                        onChange={e => setArbiterFee(e.target.value)}
                      />
                    </div>
                  </div>

                  <div className="form-control w-full">
                    <label className="label">
                      <span className="label-text">–û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏</span>
                    </label>
                    <textarea
                      className="textarea textarea-bordered h-24"
                      placeholder="–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É..."
                      value={description}
                      onChange={e => setDescription(e.target.value)}
                    ></textarea>
                  </div>

                  <div className="card-actions justify-end mt-4">
                    <button className="btn btn-primary btn-lg" onClick={handleCreateEscrow}>
                      –°–æ–∑–¥–∞—Ç—å —ç—Å–∫—Ä–æ—É
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ */}
            {activeTab === "my-escrows" && (
              <div className="space-y-4">
                {userEscrows && userEscrows.length > 0 ? (
                  userEscrows.map((escrowId: bigint) => (
                    <EscrowCard
                      key={escrowId.toString()}
                      escrowId={Number(escrowId)}
                      connectedAddress={connectedAddress}
                      onConfirmDelivery={handleConfirmDelivery}
                      onConfirmReceipt={handleConfirmReceipt}
                      onRaiseDispute={handleRaiseDispute}
                      onCancelEscrow={handleCancelEscrow}
                      getStatusText={getStatusText}
                      getStatusColor={getStatusColor}
                    />
                  ))
                ) : (
                  <div className="text-center py-12">
                    <p className="text-xl text-base-content/70">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫</p>
                    <button className="btn btn-primary mt-4" onClick={() => setActiveTab("create")}>
                      –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —ç—Å–∫—Ä–æ—É
const EscrowCard = ({
  escrowId,
  connectedAddress,
  onConfirmDelivery,
  onConfirmReceipt,
  onRaiseDispute,
  onCancelEscrow,
  getStatusText,
  getStatusColor,
}: {
  escrowId: number;
  connectedAddress: string | undefined;
  onConfirmDelivery: (id: number) => void;
  onConfirmReceipt: (id: number) => void;
  onRaiseDispute: (id: number) => void;
  onCancelEscrow: (id: number) => void;
  getStatusText: (status: number) => string;
  getStatusColor: (status: number) => string;
}) => {
  const { data: escrow } = useScaffoldReadContract({
    contractName: "YourContract",
    functionName: "getEscrow",
    args: [BigInt(escrowId)],
  });

  if (!escrow) return null;

  const isBuyer = connectedAddress?.toLowerCase() === escrow.buyer?.toLowerCase();
  const isSeller = connectedAddress?.toLowerCase() === escrow.seller?.toLowerCase();
  const status = Number(escrow.status);

  return (
    <div className="card bg-base-100 shadow-xl">
      <div className="card-body">
        <div className="flex justify-between items-start">
          <div>
            <h3 className="card-title">
              –≠—Å–∫—Ä–æ—É #{escrowId}
              <div className={`badge ${getStatusColor(status)}`}>{getStatusText(status)}</div>
            </h3>
            <p className="text-sm text-base-content/70 mt-2">{escrow.description}</p>
          </div>
          <div className="text-right">
            <p className="text-2xl font-bold">{formatEther(escrow.amount)} ETH</p>
            <p className="text-xs text-base-content/60">–ö–æ–º–∏—Å—Å–∏—è –∞—Ä–±–∏—Ç—Ä–∞: {formatEther(escrow.arbiterFee)} ETH</p>
          </div>
        </div>

        <div className="divider my-2"></div>

        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p className="font-semibold">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</p>
            <Address address={escrow.buyer} />
          </div>
          <div>
            <p className="font-semibold">–ü—Ä–æ–¥–∞–≤–µ—Ü:</p>
            <Address address={escrow.seller} />
          </div>
        </div>

        <div className="card-actions justify-end mt-4">
          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ */}
          {isSeller && status === 1 && (
            <button className="btn btn-primary btn-sm" onClick={() => onConfirmDelivery(escrowId)}>
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
            </button>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è */}
          {isBuyer && status === 2 && (
            <>
              <button className="btn btn-success btn-sm" onClick={() => onConfirmReceipt(escrowId)}>
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ
              </button>
              <button className="btn btn-error btn-sm" onClick={() => onRaiseDispute(escrowId)}>
                –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä
              </button>
            </>
          )}

          {/* –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ */}
          {(isBuyer || isSeller) && status === 1 && (
            <button className="btn btn-warning btn-sm" onClick={() => onCancelEscrow(escrowId)}>
              –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
            </button>
          )}

          {/* –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–∞–¥–∏—è—Ö FUNDED –∏–ª–∏ DELIVERED */}
          {(isBuyer || isSeller) && (status === 1 || status === 2) && (
            <button className="btn btn-outline btn-sm" onClick={() => onRaiseDispute(escrowId)}>
              –°–ø–æ—Ä
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default Home;
